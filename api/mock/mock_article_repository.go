// Code generated by MockGen. DO NOT EDIT.
// Source: repository/article.go

// Package mock is a generated GoMock package.
package mock

import (
	model "api/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArticleRepository is a mock of ArticleRepository interface
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockArticleRepository) Insert(value *model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockArticleRepositoryMockRecorder) Insert(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockArticleRepository)(nil).Insert), value)
}

// List mocks base method
func (m *MockArticleRepository) List() ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockArticleRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArticleRepository)(nil).List))
}

// Like mocks base method
func (m *MockArticleRepository) Like(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like
func (mr *MockArticleRepositoryMockRecorder) Like(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockArticleRepository)(nil).Like), id)
}
